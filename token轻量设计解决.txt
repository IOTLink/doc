token 是目前互联网公司为解决session 在服务端占用内存资源过多，易被复制提出的解决方案：
重复登录，易造成密码泄露问题设计的：
服务器端无状态，仅仅提供API接口的操作：



角色：
server    <-------------------------------------->client
                                           《-----req
                                             注册申请appid、appkey
返回appid、appkey

                                             《----申请token
                                            1: appid + MD5(appid + appkey) 
                                            2: 客户端申请时的UTC时间
                                            3:appkey只要注册是申请给client，之后不在网络中传输
                                            4：为防止知道appid 猜测MD5的appkey漏洞，可以使用server的公钥加密（appid+appkey），只有server有私钥，
                                               可以查解密到appkey，这样解决MD5攻击，

                                            

server端处理申请token请求：
从数据库中获取appid的appkey：
1：验证是否是appid自己申请token
2：记录client申请时，server端的UTC时间 （可以不用记录）

假如设置token过期时间是60s
假如有秘钥key1、 key2 、key3 。。。。
秘钥keyN（appid：申请时的UTC时间：申请时UTC+过期时间60s） + appid + N（秘钥数字） = token 返回客户端


                                                                   client业务需求，附带token信息：

server验证token：
获取末尾数字N，使用秘钥keyN解密：秘钥keyN（appid：申请时的UTC时间：申请时UTC+过期时间60s） 字符串
验证appid是否是token末尾的appid。（验证成功，则是自己签发的token信息）

验证时间是否过期


整个设计只有验证是否appid自己申请token时获取数据库中的appkey，
client发送给server要验证的token，判断token是否是server签发，并且是否是有效时间内的token信息；


-----------------------------------------------------------
怎样解决token在中间被恶意复制问题：
（appkey + 时间 + token)md5 + token + 时间 -----> send server
server： 根据token获取 appkey ，根据时间 appkey token 做同样的MD5验证；

是ok 则是正确的client 发送的请求；


还要更更安全（这标题真省事）

还记得刚才APP向服务器请求token时，可以加入的用户信息吗？比如用户的设备deviceid。
如果我们在调用接口时，还附带一个当前时间戳参数timestamp，同时，用deviceid和这个时间戳再生成一个参数sign，比如 md5(deviceid timestamp token)这样的形式。而服务端首先验证一下参数中的时间戳与当前服务器时间是否一致（误差保持在合理范围内即可，比如5分钟），然后根据用户保存在服务器中的deviceid来对参数中的时间戳进行相同的变形，验证是否匹配，那便自然“更更安全”了。
tips:如果对整个调用请求中的参数进行排序，再以deviceid和timestamp加上排序后的参数来对整个调用生成1个sign，黑客即使截获sign，不同的时间点、参数请求所使用的sign也是不同的，难以伪造，自然会更安全。当然，写起来也更费事。
tips:明白了原理，整个验证过程是可以根据自己的需求改造的。


基于时间--区块链设计的token  ？？？？


