// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.pro

/*
Package stream is a generated protocol buffer package.

It is generated from these files:
	stream.pro

It has these top-level messages:
	RegisterReq
	RegisterReply
	RegisterInfo
	Asset
	Transaction
	MsgReply
*/
package stream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterReq struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Pwd  string `protobuf:"bytes,2,opt,name=pwd" json:"pwd,omitempty"`
}

func (m *RegisterReq) Reset()                    { *m = RegisterReq{} }
func (m *RegisterReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()               {}
func (*RegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterReq) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *RegisterReq) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

type RegisterReply struct {
	Message string        `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Info    *RegisterInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *RegisterReply) Reset()                    { *m = RegisterReply{} }
func (m *RegisterReply) String() string            { return proto.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()               {}
func (*RegisterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RegisterReply) GetInfo() *RegisterInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type RegisterInfo struct {
	Appid  string `protobuf:"bytes,1,opt,name=appid" json:"appid,omitempty"`
	Appkey string `protobuf:"bytes,2,opt,name=appkey" json:"appkey,omitempty"`
}

func (m *RegisterInfo) Reset()                    { *m = RegisterInfo{} }
func (m *RegisterInfo) String() string            { return proto.CompactTextString(m) }
func (*RegisterInfo) ProtoMessage()               {}
func (*RegisterInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterInfo) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *RegisterInfo) GetAppkey() string {
	if m != nil {
		return m.Appkey
	}
	return ""
}

type Asset struct {
	Userid string `protobuf:"bytes,1,opt,name=userid" json:"userid,omitempty"`
	Value  int32  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *Asset) Reset()                    { *m = Asset{} }
func (m *Asset) String() string            { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()               {}
func (*Asset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Asset) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *Asset) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Transaction struct {
	Ownerid    string `protobuf:"bytes,1,opt,name=ownerid" json:"ownerid,omitempty"`
	Receiverid string `protobuf:"bytes,2,opt,name=receiverid" json:"receiverid,omitempty"`
	Value      int32  `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Transaction) GetOwnerid() string {
	if m != nil {
		return m.Ownerid
	}
	return ""
}

func (m *Transaction) GetReceiverid() string {
	if m != nil {
		return m.Receiverid
	}
	return ""
}

func (m *Transaction) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type MsgReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *MsgReply) Reset()                    { *m = MsgReply{} }
func (m *MsgReply) String() string            { return proto.CompactTextString(m) }
func (*MsgReply) ProtoMessage()               {}
func (*MsgReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MsgReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterReq)(nil), "stream.RegisterReq")
	proto.RegisterType((*RegisterReply)(nil), "stream.RegisterReply")
	proto.RegisterType((*RegisterInfo)(nil), "stream.RegisterInfo")
	proto.RegisterType((*Asset)(nil), "stream.Asset")
	proto.RegisterType((*Transaction)(nil), "stream.Transaction")
	proto.RegisterType((*MsgReply)(nil), "stream.MsgReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamServer service

type StreamServerClient interface {
	RegisterClient(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
	InitAsset(ctx context.Context, in *Asset, opts ...grpc.CallOption) (*MsgReply, error)
	DealTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*MsgReply, error)
	QueryAsset(ctx context.Context, in *Asset, opts ...grpc.CallOption) (*Asset, error)
}

type streamServerClient struct {
	cc *grpc.ClientConn
}

func NewStreamServerClient(cc *grpc.ClientConn) StreamServerClient {
	return &streamServerClient{cc}
}

func (c *streamServerClient) RegisterClient(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := grpc.Invoke(ctx, "/stream.StreamServer/RegisterClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServerClient) InitAsset(ctx context.Context, in *Asset, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := grpc.Invoke(ctx, "/stream.StreamServer/InitAsset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServerClient) DealTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := grpc.Invoke(ctx, "/stream.StreamServer/DealTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServerClient) QueryAsset(ctx context.Context, in *Asset, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := grpc.Invoke(ctx, "/stream.StreamServer/QueryAsset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StreamServer service

type StreamServerServer interface {
	RegisterClient(context.Context, *RegisterReq) (*RegisterReply, error)
	InitAsset(context.Context, *Asset) (*MsgReply, error)
	DealTransaction(context.Context, *Transaction) (*MsgReply, error)
	QueryAsset(context.Context, *Asset) (*Asset, error)
}

func RegisterStreamServerServer(s *grpc.Server, srv StreamServerServer) {
	s.RegisterService(&_StreamServer_serviceDesc, srv)
}

func _StreamServer_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.StreamServer/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).RegisterClient(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamServer_InitAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Asset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).InitAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.StreamServer/InitAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).InitAsset(ctx, req.(*Asset))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamServer_DealTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).DealTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.StreamServer/DealTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).DealTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamServer_QueryAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Asset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).QueryAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.StreamServer/QueryAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).QueryAsset(ctx, req.(*Asset))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.StreamServer",
	HandlerType: (*StreamServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClient",
			Handler:    _StreamServer_RegisterClient_Handler,
		},
		{
			MethodName: "InitAsset",
			Handler:    _StreamServer_InitAsset_Handler,
		},
		{
			MethodName: "DealTransaction",
			Handler:    _StreamServer_DealTransaction_Handler,
		},
		{
			MethodName: "QueryAsset",
			Handler:    _StreamServer_QueryAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stream.pro",
}

func init() { proto.RegisterFile("stream.pro", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x4f, 0x4f, 0x6a, 0x31,
	0x10, 0xc5, 0xe1, 0xf1, 0xe7, 0x3d, 0x06, 0x78, 0x8f, 0xcc, 0x43, 0x43, 0x58, 0x18, 0xd3, 0xb8,
	0x60, 0x61, 0x58, 0x40, 0xdc, 0x18, 0x63, 0x62, 0x74, 0xc3, 0xc2, 0x85, 0x17, 0xb7, 0x2e, 0x2a,
	0x0c, 0xa4, 0xf1, 0xd2, 0x96, 0xb6, 0x40, 0xee, 0x37, 0xf6, 0x63, 0x98, 0xdb, 0x7b, 0x0b, 0x57,
	0x25, 0x71, 0x37, 0xbf, 0xd3, 0x39, 0x33, 0xd3, 0x03, 0x60, 0x9d, 0x21, 0xbe, 0x1a, 0x6a, 0xa3,
	0xb0, 0x9e, 0xd5, 0x6c, 0x0c, 0xcd, 0x88, 0x96, 0xc2, 0x3a, 0x32, 0x11, 0xad, 0x11, 0xa1, 0xba,
	0xb1, 0x64, 0x7a, 0xe5, 0xf3, 0xf2, 0xa0, 0x11, 0xf9, 0x1a, 0x3b, 0x50, 0xd1, 0xbb, 0x79, 0xef,
	0x97, 0x97, 0xd2, 0x92, 0x4d, 0xa1, 0x7d, 0x30, 0xe9, 0x38, 0xc1, 0x1e, 0xfc, 0x5e, 0x91, 0xb5,
	0x7c, 0x49, 0xb9, 0x33, 0x20, 0x0e, 0xa0, 0x2a, 0xe4, 0x42, 0x79, 0x77, 0x73, 0xd4, 0x1d, 0xe6,
	0x27, 0x04, 0xfb, 0x44, 0x2e, 0x54, 0xe4, 0x3b, 0xd8, 0x0d, 0xb4, 0x8a, 0x2a, 0x76, 0xa1, 0xc6,
	0xb5, 0x16, 0xf3, 0x7c, 0x62, 0x06, 0x78, 0x0a, 0x75, 0xae, 0xf5, 0x1b, 0x25, 0xf9, 0x3d, 0x39,
	0xb1, 0x2b, 0xa8, 0xdd, 0x59, 0x4b, 0x2e, 0x6d, 0x48, 0xaf, 0xde, 0xfb, 0x72, 0x4a, 0xc7, 0x6d,
	0x79, 0xbc, 0x21, 0xef, 0xab, 0x45, 0x19, 0xb0, 0x17, 0x68, 0x3e, 0x1b, 0x2e, 0x2d, 0x9f, 0x39,
	0xa1, 0x64, 0xfa, 0x0f, 0xb5, 0x93, 0x05, 0x77, 0x40, 0x3c, 0x03, 0x30, 0x34, 0x23, 0xb1, 0xf5,
	0x8f, 0xd9, 0xee, 0x82, 0x72, 0x18, 0x5f, 0x29, 0x8e, 0xbf, 0x80, 0x3f, 0x8f, 0x76, 0xf9, 0x43,
	0x46, 0xa3, 0xf7, 0x32, 0xb4, 0xa6, 0x3e, 0x97, 0x29, 0x99, 0x2d, 0x19, 0xbc, 0x85, 0xbf, 0x21,
	0x8a, 0xfb, 0x58, 0x90, 0x74, 0xf8, 0xff, 0x6b, 0x70, 0x11, 0xad, 0xfb, 0x27, 0xdf, 0x45, 0x1d,
	0x27, 0xac, 0x84, 0x43, 0x68, 0x4c, 0xa4, 0x70, 0x59, 0x20, 0xed, 0xd0, 0xe5, 0xb1, 0xdf, 0x09,
	0x18, 0x0e, 0x63, 0x25, 0xbc, 0x86, 0x7f, 0x0f, 0xc4, 0xe3, 0x62, 0x12, 0xfb, 0x85, 0x05, 0xf1,
	0xa8, 0xf7, 0x12, 0xe0, 0x69, 0x43, 0x26, 0x39, 0xba, 0xec, 0x33, 0xb2, 0xd2, 0x6b, 0x5d, 0x1b,
	0xe5, 0xd4, 0xf8, 0x23, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x6f, 0x8e, 0x07, 0x8b, 0x02, 0x00, 0x00,
}
